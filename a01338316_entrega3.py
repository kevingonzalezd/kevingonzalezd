# -*- coding: utf-8 -*-
"""A01338316_Entrega3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14MTBX0LkMoWKoCu8YCP9l9FoUdRfzC8J

##Entrega Etapa 2 del Proyecto Integrador

Situación problema: Nivel de educación en México, evaluación PISA 2018 


Kevin Antonio González Díaz

A01338316

Pensamiento computacional para ingeniería (Gpo 52)

Profesor Germán Domínguez Solís

17 de octubre de 2021

Enlace Google Colab: 
https://colab.research.google.com/drive/14MTBX0LkMoWKoCu8YCP9l9FoUdRfzC8J?usp=sharing

#Introducción

Estudiantes mexicanos de 15 años de edad obtuvieron un puntaje bajo en lectura, matemáticas y ciencias en comparación con el obtenido por los países que pertenecen a la OCDE. En América Latina, México ocupó el tercer lugar, sólo por debajo de Uruguay y Chile. El rendimiento promedio obtenido en estas asignaturas y sus habilidades evaluadas muestran que hay muchas áreas de mejora en nuestro país y que hay muchos puntos en los que se debe trabajar. Estas pruebas son aplicadas cada tres años. Se encargan de analizar el rendimiento de alumnos de 15 años en las áreas de lectura, matemáticas y ciencias y también se estudian sus comportamientos, como la motivación de los alumnos por aprender y sus estrategias de aprendizaje. Los estudiantes son elegidos a partir de una muestra aleatoria de escuelas públicas y privadas.  

El objetivo de este proyecto es desarrollar un sistema que sirva de apoyo para los estudiantes para que puedan prepararse para la evaluación PISA (Programa para la Evaluación Internacional de Alumnos de la OCDE) y de esta manera obtener un mejor puntaje a nivel nacional y mejorar el rendimiento académico de los estudiantes, que mejoren sus estrategias de aprendizaje y aumentar su motivación para seguir estudiando. Básicamente lo que busca el programa es que el estudiante tenga la opción de realizar exámenes y obtener su puntaje en forma de práctica, para que de esta forma pueda ir midiendo su avance y además, ofrecer herramientas de retroalimentación y estudio para que puedan mejorar sus conocimientos y habilidades.

El programa cuenta con un menú de 6 opciones:
​​

1. Alta de preguntas de prueba PISA (lectura, matemáticas, ciencias)

2. Actualizar preguntas de la prueba PISA (lectura, matemáticas, ciencias)

3. Estudiar preguntas de cierta área (lectura, matemáticas, ciencias)

4. Presentar un quiz (lectura, matemáticas, ciencias)

5. Reporte de calificaciones

6. Salir

En donde podrán ingresarse las preguntas con sus respectivas respuestas, podrás elegir el área en la que sientas más dificultad para poder estudiar a través de preguntas-respuestas y presentar un quiz y así mismo obtener un reporte de tus resultados y en el momento que desees podrás terminar el programa al seleccionar la opción 6. Salir. Es una plataforma completa que le servirá a los usuarios a practicar indefinidamente hasta reforzar sus conocimientos y estar preparados para presentar la prueba de forma exitosa, porque contiene un apartado de estudio, otro de examen y los resultados, por cada área, para una mayor precisión al estudiar, optimizando el tiempo de los estudiantes.
"""

from threading import Thread
from time import sleep

def menu ():
  
  #Esta función la mandará llamar la de main y sacará como resultado "option" y regresará ese valor a la main para que ella decida a que función llamará
  #Aquí solo se despliega el menú y se le pide al usuario que elija una

  opcion = int(input("\nElige el número de la opción que desee del siguiente menú:\n"+
        "\n1. Alta de preguntas de prueba PISA (lectura, matemáticas, ciencias)\n"+
        "2. Actualizar preguntas de la prueba PISA (lectura, matemáticas, ciencias)\n"+
        "3. Estudiar preguntas de cierta área (lectura, matemáticas, ciencias)\n"+
        "4. Presentar un quiz (lectura, matemáticas, ciencias)\n"+
        "5. Reporte de calificaciones\n"+
        "6. Salir\n\n"))
  
  return opcion



import os.path

def abrir_archivo(nombre):
  
  preguntas = [] #aquí solo estoy inicializando la variable que sea una lista

  if os.path.exists(nombre): #vamos a meter el parámetro (argumento) de la función para ver si existe o no 

    with open(nombre, 'r') as data: #usamos la r, de read para leer el archivo, y si el if detecta que el archivo si está entonces lo va a leer

      for linea in data:

        linea = linea[:-1] #para los saltos de línea

        preguntas.append(linea.split(','))#separar los elementos por coma

  return preguntas



def registrar_preguntas():

  #Esta función es para que el usuario pueda agregar algún elemento (una lista) a la lista preguntas, o sea agregar preguntas 
 
  global preguntas #como la vamos a estar usando en otras funciones necesitamos que sea global

  print("Bienvenido a la opción: Alta de preguntas de prueba PISA")

  id_pregunta = input("\nIngresa el ID de la pregunta:  ")
  enfoque = input("\nEscribe el enfoque de la pregunta (lectura, matemáticas y ciencias): ")
  pregunta = input("\nEscribe el texto de la pregunta: ")
  respuestas = ""

  for num in range(4): #para registrar las 4 respuestas
    
    respuesta = input(f"Ingresa la respuesta {num+1}: ")

    if num == 3:
      respuestas = respuestas + respuesta

    else:
      respuestas = respuestas + respuesta + "," #para separar con comas, expeto el último
    
  respuestas = respuestas.split(",") #separar los elementos por coma

  respuesta_1, respuesta_2, respuesta_3, respuesta_4 = respuestas #para ordenar las variables por así decirlo y usarlas abajo

  respuesta_correcta = input("Ingresa la respuesta correcta: ")

  pregunta = [id_pregunta, enfoque, pregunta, respuesta_1, respuesta_2, 
              respuesta_3, respuesta_4, respuesta_correcta] # registrar la pregunta con todos sus datos

  preguntas.append(pregunta) #agregar la lista de esa pregunta a la lista que contiene a todas las preguntas

  print("\n¡La pregunta se ha registrado exitosamente!\n")



def actualizar_pregunta():
  
  global preguntas #como la vamos a estar usando en otras funciones necesitamos que sea global

  print("\nBienvenido a la opción: Actualizar preguntas de la prueba PISA \n")

  for pregunta in preguntas: #el for es para desplegar todas las preguntas y el usuario pueda visualizarlas y ver qué quiere modificar
    
    id_pregunta, enfoque, pregunta, respuesta_1, respuesta_2, respuesta_3, respuesta_4, respuesta_correcta = pregunta #para ordenar las variables por así decirlo y usarlas abajo
    
    print(f"ID de la pregunta: {id_pregunta} \nEnfoque de la pregunta: {enfoque} \nPregunta: {pregunta}")

    print(f"a){respuesta_1:<15}b){respuesta_2:<15}c){respuesta_3:<15}d){respuesta_4:<15} \n")
  
    
  while True: 
      
    id_cambio = int(input("\nIngresa el ID de la pregunta que desee cambiar: "))

    if id_cambio < 1 or id_cambio > len(preguntas): #aquí es para que no ponga números negativos o quiera cambiar una pregunta que no esté en la lista
      print("¡Error! Escribe un ID válido")
      continue 

    else:
      break


  id_pregunta, enfoque, pregunta, respuesta_1, respuesta_2, respuesta_3, respuesta_4, respuesta_correcta = preguntas[id_cambio-1] #para ordenar las variables y usarlas abajo, id_cambio-1 porque el range inicia en 0, 
 
  print(f"La pregunta que desea actualizar es:  \nID de la pregunta: {id_pregunta} \nEnfoque de la pregunta: {enfoque} \nPregunta: {pregunta}") 
  print(f"a){respuesta_1:<15}b){respuesta_2:<15}c){respuesta_3:<15}d){respuesta_4:<15} \n")
  
  
  #nuevas variables para hacer cambios en la pregunta elegida
  nuevo_enfoque = input("Escriba el enfoque de la pregunta: ")
  nuevo_pregunta = input("Escriba la pregunta: ")
  nuevo_respuesta_1 = input("Escriba la respuesta 1 ")
  nuevo_respuesta_2 = input("Escriba la respuesta 2 ")
  nuevo_respuesta_3 = input("Escriba la respuesta 3 ")
  nuevo_respuesta_4 = input("Escriba la respuesta 4 ")
  nuevo_respuesta_correcta = input("Escriba la respuesta correcta ")  
 
  #estos if son para los espacios, si el usuario da ENTER no se cambian los datos
  if nuevo_enfoque == "":

    nuevo_enfoque = preguntas[id_cambio-1][1] #por ejemplo ahí, si el usuario le da enter :"", lo que se va a hacer es que 
    #el nuevo_enfoque tomará el mismo valor de antes, y primero ubica la pregunta [id_cambio-1] y luego el enofque [1]
    #y así se hace en los demás
   
  if nuevo_pregunta == "":
    
    nuevo_pregunta = preguntas[id_cambio-1][2]
    
  if nuevo_respuesta_1 == "":
   
    nuevo_respuesta_1 = preguntas[id_cambio-1][3]

  if nuevo_respuesta_2 == "":
    
    nuevo_respuesta_2 = preguntas[id_cambio-1][4]      

  if nuevo_respuesta_3 == "":
    
    nuevo_respuesta_3 = preguntas[id_cambio-1][5]      


  if nuevo_respuesta_4 == "":
    
    nuevo_respuesta_4 = preguntas[id_cambio-1][6]   

  if nuevo_respuesta_correcta == "":
    
    nuevo_respuesta_correcta = preguntas[id_cambio-1][7] 
      

#muestra la pregunta actualizada para que el usuario decida si la cambia o no 
  print(f"\nLa pregunta actualizada sería:  \nID de la pregunta: {id_cambio} \nEnfoque de la pregunta: {nuevo_enfoque} \nPregunta: {nuevo_pregunta}")
  print(f"a){nuevo_respuesta_1:<15}b){nuevo_respuesta_2:<15}c){nuevo_respuesta_3:<15}d){nuevo_respuesta_4:<15} \nRespuesta correcta: {nuevo_respuesta_correcta}")
  
  confirmar = input(print("\n\n¿Estás seguro que deseas actualizar (SI/NO)"))

  while True:
    if confirmar != "SI" and confirmar != "si" and confirmar != "Si" and confirmar != "NO" and confirmar != "no" and confirmar != "No":
      confirmar = input(print("¡Error! escriba SI o NO")) #para que el usuario escriba bien su respuesta 
    
    else:
      break

  if confirmar == "SI" or confirmar == "si" or confirmar == "Si": #solo es por si el usuario escribe el si de distintas formas y es para que se confirme el cambio
    preguntas[id_cambio-1][1] = nuevo_enfoque
    preguntas[id_cambio-1][2] = nuevo_pregunta
    preguntas[id_cambio-1][3] = nuevo_respuesta_1
    preguntas[id_cambio-1][4] = nuevo_respuesta_2
    preguntas[id_cambio-1][5] = nuevo_respuesta_3
    preguntas[id_cambio-1][6] = nuevo_respuesta_4
    preguntas[id_cambio-1][7] = nuevo_respuesta_correcta
  
    print("\nLa pregunta se ha actualizado exitosamente\n")


def estudiar_area():

  global enfoque_quiz #como la vamos a estar usando en otras funciones necesitamos que sea global
  global numero_preguntas
  global preguntas
 
 
  print("\nBienvenido a la opción: Estudiar preguntas de cierta área\n")
 
  
  while True:
   
    enfoque_quiz = input("Escribe el enfoque del quiz: (Lectura, Matemáticas, Ciencias) ")
   
    if enfoque_quiz != "Lectura" and enfoque_quiz != "Matemáticas" and enfoque_quiz != "Ciencias":
      print("\nEscribe un enfoque correcto: (Lectura, Matemáticas, Ciencias) ")
      continue
    
    else:
      break
 
  
  while True:
   
    numero_preguntas = int(input(f"\nEscribe el número de preguntas mayor a 0: ")) #solo es el while para que escriba números positivos
   
    if numero_preguntas < 1 or numero_preguntas > len(preguntas):
      print("¡Error! Inténtelo de nuevo ") 
      continue

    else:
      break
  
  
  estudiar_preguntas=[] #para ir agregando las preguntas del enfoque a una nueva lista
  
  for n in range(len(preguntas)):

    if preguntas[n][1] == enfoque_quiz: #el primer n es para que recorra todos los elementos de la lista preguntas, y el 1 es para que solo se fije en el enfoque

      estudiar_preguntas.append(preguntas[n]) #y aquí se agrega la lista n de preguntas que coincida con el enfoque
  
  print(f"\nEl siguiente es un quiz con enfoque de {enfoque_quiz} que cuenta con {numero_preguntas} preguntas\n ")
  
  
 #aquí desplegamos la guía con preguntas que contienen respuestas para que estudien
  for m in range(numero_preguntas):
   
    estudiar_id, estudiar_enfoque, estudiar_pregunta, estudiar_r1, estudiar_r2, estudiar_r3, estudiar_4, estudiar_correcta = estudiar_preguntas[m]
   
    print(f"\n ID de la pregunta: {estudiar_id} \nEnfoque de la pregunta: {estudiar_enfoque} \nPregunta: {estudiar_pregunta}")
    print(f"a){estudiar_r1:<15}b){estudiar_r2:<15}c){estudiar_r3:<15}d){estudiar_4:<15} \nRespuesta correcta: {estudiar_correcta}\n")
  

#profe fue un rollo para el timer, buscando en google encontré el uso de los hilos (thread) porque necesitaba que se corrieran las dos
#al mismo tiempo, por eso agregué una función extra que es la de timer para que le vaya restando los segundos
def timer():
   
    sleep_duration = 1200 #1200 segundos son los 20 min
    print(f"\n Tienes {sleep_duration/60} minutos para realizar tu quiz, ¡Éxito!\n ")
    
    while sleep_duration > 0: #para que cuando se acabe el tiempo (los 20minutos) se finalice el while y se acabe el quiz

        sleep(1)
        sleep_duration -= 1 #se le va restando 1 segundo a sleep_duration=1200 para que sean los 20min

    print("Temporizador finalizado")

def presentar_quiz():
 
  global aciertos_quiz #como la vamos a estar usando en otras funciones necesitamos que sea global
  global errores_quiz
  global intentos_quiz
  
  intentos_quiz = intentos_quiz + 1 #para contar cuántas veces ha hecho el quiz

  timer_thread = Thread(target=timer) #es la función hilo, y con el start es cuando empieza jaja

  timer_thread.start()
  
  print("\nBienvenido a la opción: Presentar un quiz \n\n El presente quiz tiene una duración de 20 minutos y contiene 10 preguntas de las 3 áreas de estudio\n\n¡MUCHO ÉXITO!")
  
  for contador in range(10): #Porque son 10 preguntas y queremos ir viendo cada pregunta si aún tiene tiempo, y para que cuando se acaben las preguntas se termine la función
    print()

    if not timer_thread.is_alive(): #que verifique si hay tiempo
      print("SE ACABÓ EL TIEMPO")
      break 
      
   
    quiz_id, quiz_enfoque, quiz_pregunta, quiz_r1, quiz_r2, quiz_r3, quiz_r4, quiz_correcta = preguntas[contador]
      
    print(f"\n ID de la pregunta: {quiz_id} \nEnfoque de la pregunta: {quiz_enfoque} \nPregunta: {quiz_pregunta}")
    print(f"a){quiz_r1:<15}b){quiz_r2:<15}c){quiz_r3:<15}d){quiz_r4:<15}\n") 

    answer = input("Escribe la respuesta (no escribas el inciso, escribe la respuesta exacta) : ") 
      
    if answer == quiz_correcta:
      print("Respuesta correcta")
      aciertos_quiz = aciertos_quiz + 1 #acumulando los aciertos

    else:
      print("Respuesta incorrecta")
      errores_quiz = errores_quiz + 1 #acumulando errores, aunque ni ocupé la variable
           

def reportar_calificaciones():
  
  print("\nBienvenido a la opción: Reporte de calificaciones")

  #perdón por usar esas variables pero se me acabó la imaginación con tantas, de todos modos solo las ocupé para poder centrar la inf
  user = "Total usuarios" 
  calif = "Promedio calificaciones: "
  preg = "% Preguntas correctas"
  pregun = "% Preguntas incorrectas:" 
  

#los intentos_quiz es el acumulador y nos dice cuántas veces realizó el quiz, para el promedio de calificaciones me di cuenta
#que daba lo mismo promediar las calificaciones a sacar la suma TOTAL de aciertos entre el número de preguntas totales (9/10 + 7/10)/2 es lo mismo que 16/20
#así que aciertos_quiz contiene todas las preguntas correctas de todos los quiz realizados
#y 10*intentos_quiz nos dice el número de preguntas totales, por eso, el promedio es 100*(aciertos_quiz/(10*intentos_quiz))
#y así usé la lógica para lo demás

  print(f"\n\n{user:^25} {intentos_quiz:^25}\n\n{calif:^25}{100*(aciertos_quiz/(10*intentos_quiz)):^25}") 
  print(f"\n{preg:^25}{100*(aciertos_quiz/(10*intentos_quiz)):^25}\n\n{pregun:^25}{100-100*(aciertos_quiz/(10*intentos_quiz)):^25}")  
  

def salir():
  
  print("\nUsted presionó la opción salir, sus datos se han guardado exitosamente.\n\n ¡HASTA LUEGO!")

def grabar_archivo(nombre, lista):

  with open(nombre, 'w') as datos:

    for pregunta in lista:

      linea = ""

      for elemento in range(len(pregunta)):

        if elemento < (len(pregunta)-1):

          linea += str(pregunta[elemento]) + ","

        else:

          linea += str(pregunta[elemento]) + "\n"

      datos.write(linea)

def main():

  global aciertos_quiz #como las vamos a estar usando en otras funciones necesitamos que sean global
  global errores_quiz
  global intentos_quiz
  global preguntas
  global nombre
  
  aciertos_quiz = 0
  errores_quiz = 0
  intentos_quiz = 0
  nombre = 'preguntas.txt' #así está guardado el archivo y le asignamos la variable nombre
  preguntas = abrir_archivo(nombre) #para llamar la función que hace la lista

  respuesta_usuario = menu()

  while respuesta_usuario != 6: #se seguirán preguntando las opciones hasta que el usuario le de en salir al sistema
    
    if respuesta_usuario == 1:
      registrar_preguntas()
  
    elif respuesta_usuario == 2:
      actualizar_pregunta()
  
    elif respuesta_usuario == 3:
      estudiar_area()
  
    elif respuesta_usuario == 4:
      presentar_quiz()

    elif respuesta_usuario == 5:
      reportar_calificaciones()

    elif respuesta_usuario == 6:
      salir()
    
    else:
      print("\nError, tiene que elegir una opción del 1 al 6, intente de nuevo\n")
    
    respuesta_usuario = menu()
  
  grabar_archivo(nombre, preguntas) #cuando el usuario le da salir y se rompe el while, es cuando se guardan todos los datos

main()

print("\nUsted presionó la opción salir, sus datos se han guardado exitosamente.\n\n ¡HASTA LUEGO!")